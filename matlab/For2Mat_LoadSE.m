function For2Mat_LoadSE(ldFile,x0,svFile,folder)
% Load the output from the Fortran file encorr.f90
% Save the contents into a .mat file for easy use in Matlab
% Input variables:
%   ldFile  ->  Suffix of Fortran data file
%   x0      ->  mu/Delta value used
%   svFile  ->  Name of .mat file to store data
%   folder  ->  Optional, folder where data files are stored
% 
% Output save files contains the following variables:
%   x0    -> number mu/Delta
%   K     -> matrix hbar k/sqrt(2 m Delta)
%   uK    -> unique values of hbar k/sqrt(2 m Delta)
%   Z     -> matrix z_k/Delta
%   SPP   -> matrix Sigma_{+,+}/Delta
%   SMM   -> matrix Sigma_{-,-}/Delta
%   SPM   -> matrix Sigma_{+,-}/Delta
%   th12  -> epsilon_th^(1->2)/Delta
%   th13  -> epsilon_th^(1->3)/Delta

    if nargin<4
        folder='';
    end

    % Load continuum and self-energy values
    flc=importCont([folder,'/continuum',ldFile,'.dat']);
    fle=importfile([folder,'/selfEtot',ldFile,'.dat']);

    % Store data in separate variables
    k=fle.k; % k values
    z=fle.zk; % zk values
    Spp=fle.rSpp+1i*fle.iSpp; % Self-energy Sig_{+,+}
    Smm=fle.rSmm+1i*fle.iSmm; % Self-energy Sig_{-,-}
    Spm=fle.rSpm+1i*fle.iSpm; % Self-energy Sig_{+,-}
    cK=flc.k; % k values for thresholds
    th12=flc.th12; % eps_th^1->2
    th13=flc.th13; % eps_th^1->3

    % Unique k values
    uK=unique(k);
    nk=length(unique(k));

    % max length of zk
    lZ=zeros(size(uK));
    for ik=1:nk
        ii=find(k==uK(ik));
        lZ(ik)=length(ii);
    end
    nz=max(lZ);

    % Create matrices
    K=NaN*zeros(nk,nz); % hbar k/sqrt(2 m Delta)
    Z=NaN*zeros(nk,nz); % z_k/Delta
    SPP=NaN*zeros(nk,nz); % Sigma_{+,+}
    SMM=NaN*zeros(nk,nz); % Sigma_{-,-}
    SPM=NaN*zeros(nk,nz); % Sigma_{+,-}

    % Fill matrices
    for ik=1:nk
        K(ik,:)=uK(ik);

        % Get values for k=uK(ik)
        indUniqK=find(k==uK(ik));

        Z_UniqK=z(indUniqK);
        SPP_UniqK=Spp(indUniqK);
        SMM_UniqK=Smm(indUniqK);
        SPM_UniqK=Spm(indUniqK);

        % Sort values
        [Z(ik,1:length(indUniqK)),iSort]=sort(Z_UniqK);
        SPP(ik,1:length(indUniqK))=SPP_UniqK(iSort);
        SMM(ik,1:length(indUniqK))=SMM_UniqK(iSort);
        SPM(ik,1:length(indUniqK))=SPM_UniqK(iSort);
    end

    % Sort continuum data
    [cK,cntI]=unique(cK);
    th12=th12(cntI);
    th13=th13(cntI);

    % Check if k-values of continuum and selfenergy coincide
    sd=setdiff(uK,cK);
    if isempty(sd)
        % Save to .mat file
        save(svFile,'x0','K','uK','Z','SPP','SMM','SPM','th12','th13');
    else
        error("Missing k-values. No save file created.");
    end

end


function selfEtotgrid = importfile(filename, dataLines)
    %IMPORTFILE Import data from a text file
    %  SELFETOTGRID = IMPORTFILE(FILENAME) reads data from text file
    %  FILENAME for the default selection.  Returns the data as a table.
    %
    %  SELFETOTGRID = IMPORTFILE(FILE, DATALINES) reads data for the
    %  specified row interval(s) of text file FILENAME. Specify DATALINES as
    %  a positive scalar integer or a N-by-2 array of positive scalar
    %  integers for dis-contiguous row intervals.
    %
    %  Example:
    %  selfEtotgrid = importfile("selfEtotgrid.dat", [2, Inf]);
    %
    %  See also READTABLE.
    %
    % Auto-generated by MATLAB on 24-Mar-2021 13:05:24
    
    %% Input handling
    
    % If dataLines is not specified, define defaults
    if nargin < 2
        dataLines = [2, Inf];
    end
    
    %% Setup the Import Options
    opts = delimitedTextImportOptions("NumVariables", 56);
    
    % Specify range and delimiter
    opts.DataLines = dataLines;
    opts.Delimiter = " ";
    
    % Specify column names and types
    opts.VariableNames = ["k", "zk", "rSpp", "rSmm", "rSpm", "iSpp", "iSmm", "iSpm", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41", "Var42", "Var43", "Var44", "Var45", "Var46", "Var47", "Var48", "Var49", "Var50", "Var51", "Var52", "Var53", "Var54", "Var55", "Var56"];
    opts.SelectedVariableNames = ["k", "zk", "rSpp", "rSmm", "rSpm", "iSpp", "iSmm", "iSpm"];
    opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string"];
    opts = setvaropts(opts, [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "WhitespaceRule", "preserve");
    opts = setvaropts(opts, [1, 2, 3, 5, 6, 7, 8], "TrimNonNumeric", true);
    opts = setvaropts(opts, [1, 2, 3, 5, 6, 7, 8], "ThousandsSeparator", ",");
    opts = setvaropts(opts, [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "EmptyFieldRule", "auto");
    opts.ExtraColumnsRule = "ignore";
    opts.EmptyLineRule = "read";
    opts.ConsecutiveDelimitersRule = "join";
    opts.LeadingDelimitersRule = "ignore";
    
    % Import the data
    selfEtotgrid = readtable(filename, opts);
    
end

function continuumgrid = importCont(filename, dataLines)
    %IMPORTFILE Import data from a text file
    %  CONTINUUMGRID = IMPORTFILE(FILENAME) reads data from text file
    %  FILENAME for the default selection.  Returns the data as a table.
    %
    %  CONTINUUMGRID = IMPORTFILE(FILE, DATALINES) reads data for the
    %  specified row interval(s) of text file FILENAME. Specify DATALINES as
    %  a positive scalar integer or a N-by-2 array of positive scalar
    %  integers for dis-contiguous row intervals.
    %
    %  Example:
    %  continuumgrid = importfile("continuumgrid.dat", [2, Inf]);
    %
    %  See also READTABLE.
    %
    % Auto-generated by MATLAB on 24-Mar-2021 09:58:43
    
    %% Input handling
    
    % If dataLines is not specified, define defaults
    if nargin < 2
        dataLines = [2, Inf];
    end
    
    %% Setup the Import Options
    opts = delimitedTextImportOptions("NumVariables", 22);
    
    % Specify range and delimiter
    opts.DataLines = dataLines;
    opts.Delimiter = " ";
    
    % Specify column names and types
    opts.VariableNames = ["k", "th12", "th13", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22"];
    opts.SelectedVariableNames = ["k", "th12", "th13"];
    opts.VariableTypes = ["double", "double", "double", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string"];
    opts = setvaropts(opts, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "WhitespaceRule", "preserve");
    opts = setvaropts(opts, [1, 2, 3], "TrimNonNumeric", true);
    opts = setvaropts(opts, [1, 2, 3], "ThousandsSeparator", ",");
    opts = setvaropts(opts, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "EmptyFieldRule", "auto");
    opts.ExtraColumnsRule = "ignore";
    opts.EmptyLineRule = "read";
    opts.ConsecutiveDelimitersRule = "join";
    opts.LeadingDelimitersRule = "ignore";
    
    % Import the data
    continuumgrid = readtable(filename, opts);
    
end